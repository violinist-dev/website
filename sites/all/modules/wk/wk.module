<?php

/**
 * @file
 * West Kingdom customizations
 */

/**
 * Hook token_info
 *
 * Declare tokens as_year and event_month.
 */
function wk_token_info() {
  $node['as_year'] = array(
    'name' => t("Anno Societatis Year"),
    'description' => t('Year in Anno Societatis (AS). See http://www.sca.org/links/calendar.html.'),
  );
  $node['event_month'] = array(
    'name' => t("Event Month"),
    'description' => t('The month that the event is held in (reconed by starting date).'),
  );
  return array(
    'tokens' => array('node' => $node),
  );
}

/**
 * Hook tokens
 *
 * Provide data for as_year and event_month tokens.
 */
function wk_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];
    if ($node->type == 'cal_event') {
      foreach ($tokens as $name => $original) {
        switch ($name) {
          case 'as_year':
            $start_date = $node->field_date['und'][0]['value'];
            $as = wk_time_string_to_as($start_date);
            $replacements[$original] = 'AS' . $as;
            break;
          case 'event_month':
            $start_date = $node->field_date['und'][0]['value'];
            $timestamp=strtotime($start_date);
            $replacements[$original] = date('M', $timestamp);
            break;
        }
      }
    }
  }
  return $replacements;
}

function wk_time_string_to_as($time_string) {
  $timestamp=strtotime($time_string);
  return wk_timestamp_to_as($timestamp);
}

function wk_timestamp_to_as($timestamp) {
  $date_info = getdate($timestamp);
  $as = $date_info['year'] - 1966;
  if ($date_info['mon'] >= 5) {
    $as = $as + 1;
  }
  return $as;
}

/**
 * Hook module_implements_alter
 *
 * Make sure that our hook_menu_alter is called after
 * revisioning_menu_alter.
 */
function wk_module_implements_alter(&$implementations, $hook) {
  // Make our module run after all of the others
  if ($hook == 'menu_alter' && isset($implementations['wk'])) {
    $group = $implementations['wk'];
    unset($implementations['wk']);
    $implementations['wk'] = $group;
  }
}

/**
 * Hook menu
 */
function wk_menu() {
  $items = array();

  $items['node/%node/revisions/%vid/list'] = array(
    'title' => 'List all revisions',
    'access callback' => '_revisioning_access_node_revision',
    'access arguments' => array('view revision list', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => -20,
  );

  return $items;
}

/**
 * Hook menu_alter
 *
 * Use a consistent title, 'Revision operations' for the
 * revisions tab.  Show the revisions page in the standard
 * site theme, not the admin theme.
 */
function wk_menu_alter(&$items) {
  $items['node/%node/revisions']['page arguments'] = array(1, $items['node/%node/revisions']['page callback']);
  $items['node/%node/revisions']['page callback'] = '_wk_revisioning_redirect';
  $items['node/%node/revisions']['title callback'] = '_wk_revisioning_title_for_tab';
  $items['node/%node/revisions']['theme callback'] = '_wk_revisioning_standard_theme';
  unset($items['node/%node/revisions/list']);
  $items['node/%node/revisions/%vid/view']['title callback'] = '_wk_revisioning_title_for_edit_and_view';
  $items['node/%node/revisions/%vid/view']['title arguments'] = array(1, 3, 'view');
  $items['node/%node/revisions/%vid/edit']['title callback'] = '_wk_revisioning_title_for_edit_and_view';
  $items['node/%node/revisions/%vid/edit']['title arguments'] = array(1, 3, 'edit');
}

function _wk_revisioning_redirect($node, $was) {
  $item = menu_get_item();
  if ($item['path'] == 'node/%/revisions') {
    drupal_goto('node/' . $node->nid . '/revisions/' . $node->current_revision_id . '/list');
  }
  return revisioning_node_overview($node);
}

function _wk_revisioning_title_for_tab($node, $tab) {
  return t('Revision operations');
}

function _wk_revisioning_standard_theme() {
  return variable_get('theme_default');
}

function _wk_revisioning_title_for_edit_and_view($node, $vid, $tab) {
  // TODO: stash in $node
  $latest_vid = revisioning_get_latest_revision_id($node->nid);
  $title = ($tab == 'edit') ? t('Edit') : t('View');
  if ($vid == $node->current_revision_id) {
    $title = ($tab == 'edit') ? t('Edit Current') : t('View Current');
  }
  if ($vid == $latest_vid) {
    $title = ($tab == 'edit') ? t('Edit Latest') : t('View Latest');
  }
  return $title;
}
