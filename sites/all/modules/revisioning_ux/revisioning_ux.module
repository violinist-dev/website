<?php

/**
 * @file
 * Revisioning User Experience Adjustments
 */

/**
 * Hook module_implements_alter
 *
 * Make sure that our hook_menu_alter is called after
 * revisioning_menu_alter.
 */
function revisioning_ux_module_implements_alter(&$implementations, $hook) {
  // Make our module run after all of the others
  if ($hook == 'menu_alter' && isset($implementations['revisioning_ux'])) {
    $group = $implementations['revisioning_ux'];
    unset($implementations['revisioning_ux']);
    $implementations['revisioning_ux'] = $group;
  }
}

/**
 * Hook menu
 */
function revisioning_ux_menu() {
  $items = array();

  $items['node/%node/revisions/%vid/list'] = array(
    'title' => 'List all revisions',
    'access callback' => '_revisioning_access_node_revision',
    'access arguments' => array('view revision list', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => -20,
  );

  return $items;
}

/**
 * Hook menu_alter
 *
 * Use a consistent title, 'Revision operations' for the
 * revisions tab.  Show the revisions page in the standard
 * site theme, not the admin theme.  Insure that the sub-tabs
 * in the Revisioning Operations panel are consistent.
 */
function revisioning_ux_menu_alter(&$items) {
  $items['node/%node/revisions']['page arguments'] = array(1, $items['node/%node/revisions']['page callback']);
  $items['node/%node/revisions']['page callback'] = '_revisioning_ux_revisioning_redirect';
  $items['node/%node/revisions']['title callback'] = '_revisioning_ux_revisioning_title_for_tab';
  $items['node/%node/revisions']['theme callback'] = '_revisioning_ux_revisioning_standard_theme';
  unset($items['node/%node/revisions/list']);
  $items['node/%node/revisions/%vid/view']['title callback'] = '_revisioning_ux_revisioning_title_for_edit_and_view';
  $items['node/%node/revisions/%vid/view']['title arguments'] = array(1, 3, 'view');
  $items['node/%node/revisions/%vid/edit']['title callback'] = '_revisioning_ux_revisioning_title_for_edit_and_view';
  $items['node/%node/revisions/%vid/edit']['title arguments'] = array(1, 3, 'edit');
}

function _revisioning_ux_revisioning_redirect($node, $was) {
  $item = menu_get_item();
  if ($item['path'] == 'node/%/revisions') {
    drupal_goto('node/' . $node->nid . '/revisions/' . $node->current_revision_id . '/list');
  }
  return revisioning_node_overview($node);
}

function _revisioning_ux_revisioning_title_for_tab($node, $tab) {
  return t('Revision operations');
}

function _revisioning_ux_revisioning_standard_theme() {
  return variable_get('theme_default');
}

function _revisioning_ux_revisioning_title_for_edit_and_view($node, $vid, $tab) {
  // TODO: stash in $node
  $latest_vid = revisioning_get_latest_revision_id($node->nid);
  $title = ($tab == 'edit') ? t('Edit') : t('View');
  if ($vid == $node->current_revision_id) {
    $title = ($tab == 'edit') ? t('Edit Current') : t('View Current');
  }
  if ($vid == $latest_vid) {
    $title = ($tab == 'edit') ? t('Edit Latest') : t('View Latest');
  }
  return $title;
}
