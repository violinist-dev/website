<?php

/**
 * @file
 * Bulk export of objects generated by Bulk export module.
 */

/**
 * Implements hook_views_api().
 */
function wk_export_views_api($module, $api) {
  if ($module == 'views' && $api == 'views_default') {
    return array('version' => 2);
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function wk_export_ctools_plugin_api($module, $api) {
  if ($module == 'corresponding_node_references' && $api == 'default_corresponding_node_references_presets') {
    return array('version' => 1);
  }
  if ($module == 'file_entity' && $api == 'file_type') {
    return array('version' => 1);
  }
  if ($module == 'file_entity' && $api == 'file_default_displays') {
    return array('version' => 1);
  }
  if ($module == 'strongarm' && $api == 'strongarm') {
    return array('version' => 1);
  }
  if ($module == 'field_group' && $api == 'field_group') {
    return array('version' => 1);
  }
}
/**
 * Implements hook_default_fe_block_boxes().
 */
function wk_export_default_fe_block_boxes() {
  $fe_block_boxess = array();

  $fe_block_boxes = new stdClass();
  $fe_block_boxes->machine_name = 'activities';
  $fe_block_boxess['activities'] = $fe_block_boxes;

  $fe_block_boxes = new stdClass();
  $fe_block_boxes->machine_name = 'calendar_feeds';
  $fe_block_boxess['calendar_feeds'] = $fe_block_boxes;

  $fe_block_boxes = new stdClass();
  $fe_block_boxes->machine_name = 'contact_officer_footer';
  $fe_block_boxess['contact_officer_footer'] = $fe_block_boxes;

  $fe_block_boxes = new stdClass();
  $fe_block_boxes->machine_name = 'event_submission_form_link';
  $fe_block_boxess['event_submission_form_link'] = $fe_block_boxes;

  $fe_block_boxes = new stdClass();
  $fe_block_boxes->machine_name = 'resources';
  $fe_block_boxess['resources'] = $fe_block_boxes;

  $fe_block_boxes = new stdClass();
  $fe_block_boxes->machine_name = 'sponsored';
  $fe_block_boxess['sponsored'] = $fe_block_boxes;

  $fe_block_boxes = new stdClass();
  $fe_block_boxes->machine_name = 'universal_footer';
  $fe_block_boxess['universal_footer'] = $fe_block_boxes;

  return $fe_block_boxess;
}

/**
 * Implements hook_image_default_styles().
 */
function wk_export_image_default_styles() {
  $styles = array();

  // Exported image style: thumbnail.
  $styles['thumbnail'] = array(
    'effects' => array(
      0 => array(
        'label' => 'Scale',
        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
        'effect callback' => 'image_scale_effect',
        'dimensions callback' => 'image_scale_dimensions',
        'form callback' => 'image_scale_form',
        'summary theme' => 'image_scale_summary',
        'module' => 'image',
        'name' => 'image_scale',
        'data' => array(
          'width' => 100,
          'height' => 100,
          'upscale' => 1,
        ),
        'weight' => 0,
      ),
    ),
    'name' => 'thumbnail',
  );

  // Exported image style: medium.
  $styles['medium'] = array(
    'effects' => array(
      0 => array(
        'label' => 'Scale',
        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
        'effect callback' => 'image_scale_effect',
        'dimensions callback' => 'image_scale_dimensions',
        'form callback' => 'image_scale_form',
        'summary theme' => 'image_scale_summary',
        'module' => 'image',
        'name' => 'image_scale',
        'data' => array(
          'width' => 220,
          'height' => 220,
          'upscale' => 1,
        ),
        'weight' => 0,
      ),
    ),
    'name' => 'medium',
  );

  // Exported image style: large.
  $styles['large'] = array(
    'effects' => array(
      0 => array(
        'label' => 'Scale',
        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
        'effect callback' => 'image_scale_effect',
        'dimensions callback' => 'image_scale_dimensions',
        'form callback' => 'image_scale_form',
        'summary theme' => 'image_scale_summary',
        'module' => 'image',
        'name' => 'image_scale',
        'data' => array(
          'width' => 480,
          'height' => 480,
          'upscale' => 0,
        ),
        'weight' => 0,
      ),
    ),
    'name' => 'large',
  );

  // Exported image style: media_thumbnail.
  $styles['media_thumbnail'] = array(
    'effects' => array(
      0 => array(
        'label' => 'Scale and crop',
        'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
        'effect callback' => 'image_scale_and_crop_effect',
        'dimensions callback' => 'image_resize_dimensions',
        'form callback' => 'image_resize_form',
        'summary theme' => 'image_resize_summary',
        'module' => 'image',
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 100,
          'height' => 100,
        ),
        'weight' => 0,
      ),
    ),
    'name' => 'media_thumbnail',
  );

  // Exported image style: full_width.
  $styles['full_width'] = array(
    'name' => 'full_width',
    'effects' => array(
      1 => array(
        'label' => 'Scale',
        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
        'effect callback' => 'image_scale_effect',
        'dimensions callback' => 'image_scale_dimensions',
        'form callback' => 'image_scale_form',
        'summary theme' => 'image_scale_summary',
        'module' => 'image',
        'name' => 'image_scale',
        'data' => array(
          'width' => '1200',
          'height' => '',
          'upscale' => 0,
        ),
        'weight' => '1',
      ),
    ),
  );

  return $styles;
}

/**
 * Implements hook_default_entityform_type().
 */
function wk_export_default_entityform_type() {
  $items = array();
  $items['regnum_change'] = entity_import('entityform_type', '{
    "type" : "regnum_change",
    "label" : "Regnum Change",
    "data" : {
      "draftable" : 0,
      "draft_button_text" : "",
      "draft_save_text" : { "value" : "", "format" : "1" },
      "submission_rules" : [],
      "validation_rules" : [],
      "submit_button_text" : "",
      "submission_page_title" : "Regnum Change Notification Submitted",
      "submission_text" : {
        "value" : "\\u003Cp\\u003EThe recognition or approval of this submission will usually be done by the Seneschal of the appropriate group, or by proxy by the Web Minister. \\u0026nbsp;Approvals of deputy assignments can be done directly by the officer in charge. \\u0026nbsp;The appropriate parties will be notified of this request, and will infom you once it is processed. \\u0026nbsp;To check on the status of your submission, please contact the Web Minister.\\u003C\\/p\\u003E",
        "format" : "1"
      },
      "submission_show_submitted" : 0,
      "submissions_view" : "entityforms",
      "user_submissions_view" : "user_entityforms",
      "form_status" : "ENTITYFORM_OPEN",
      "roles" : { "2" : "2", "1" : "1", "3" : 0, "4" : 0, "6" : 0, "5" : 0 },
      "resubmit_action" : "new",
      "access_rules" : [],
      "redirect_path" : "",
      "instruction_pre" : {
        "value" : "\\u003Cp\\u003EPlease fill out this form to notify the appropriate Kingdom officers changes in information in the Kingdom or associated branch groups. Submitting this form will notify all Kingdom Officers who are involved with maintaining organizational information, including publication in the Page, email address forwards from standard Kingdom addresses to personal addresses, and website contact forms.\\u003C\\/p\\u003E",
        "format" : "1"
      }
    },
    "weight" : "0",
    "paths" : {
      "submit" : {
        "source" : "eform\\/submit\\/regnum-change",
        "alias" : "regnum",
        "language" : "und"
      },
      "confirm" : {
        "source" : "eform\\/regnum-change\\/confirm",
        "alias" : "regnum-confirm",
        "language" : "und"
      }
    }
  }');
  return $items;
}

/**
 * Implements hook_default_og_membership_type().
 */
function wk_export_default_og_membership_type() {
  $items = array();
  $items['og_membership_type_default'] = entity_import('og_membership_type', '{
    "name" : "og_membership_type_default",
    "description" : "Default",
    "language" : "en"
  }');
  return $items;
}

/**
 * Implements hook_default_rules_configuration().
 */
function wk_export_default_rules_configuration() {
  $items = array();
  $items['rules_set_event_type_to_event'] = entity_import('rules_config', '{ "rules_set_event_type_to_event" : {
      "LABEL" : "Set event type to Event",
      "PLUGIN" : "rule",
      "REQUIRES" : [ "rules" ],
      "USES VARIABLES" : { "node_parameter" : { "label" : "Node Parameter", "type" : "node" } },
      "IF" : [
        { "entity_has_field" : { "entity" : [ "node-parameter" ], "field" : "field_event_type" } }
      ],
      "DO" : [
        { "data_set" : { "data" : [ "node-parameter:field-event-type" ], "value" : "0" } }
      ]
    }
  }');
  $items['rules_og_member_active'] = entity_import('rules_config', '{ "rules_og_member_active" : {
      "LABEL" : "OG member subscribe (Active)",
      "PLUGIN" : "reaction rule",
      "ACTIVE" : false,
      "REQUIRES" : [ "rules", "og" ],
      "ON" : [ "og_user_insert" ],
      "IF" : [
        { "data_is" : { "data" : [ "og-membership:state" ], "value" : "1" } },
        { "entity_is_of_type" : { "entity" : [ "og-membership:group" ], "type" : "node" } }
      ],
      "DO" : [
        { "variable_add" : {
            "USING" : { "type" : "node", "value" : [ "og-membership:group" ] },
            "PROVIDE" : { "variable_added" : { "group" : "Added variable" } }
          }
        },
        { "mail" : {
            "to" : [ "account:mail" ],
            "subject" : "Your membership request was approved for \\u0027[group:title]\\u0027\\r\\n",
            "message" : "[account:name],\\r\\n\\r\\nYou are now a member in the group \\u0027[group:title]\\u0027 located at [group:url]"
          }
        },
        { "mail" : {
            "to" : [ "group:author:mail" ],
            "subject" : "[account:name] joined [group:title]",
            "message" : "[group:author:name],\\r\\n\\r\\n[account:name] joined [group:title] in [group:url]"
          }
        }
      ]
    }
  }');
  $items['rules_og_member_pending'] = entity_import('rules_config', '{ "rules_og_member_pending" : {
      "LABEL" : "OG member subscribe (Pending)",
      "PLUGIN" : "reaction rule",
      "ACTIVE" : false,
      "REQUIRES" : [ "rules", "og" ],
      "ON" : [ "og_user_insert" ],
      "IF" : [
        { "data_is" : { "data" : [ "og-membership:state" ], "value" : "2" } },
        { "entity_is_of_type" : { "entity" : [ "og-membership:group" ], "type" : "node" } }
      ],
      "DO" : [
        { "variable_add" : {
            "USING" : { "type" : "node", "value" : [ "og-membership:group" ] },
            "PROVIDE" : { "variable_added" : { "group" : "Added variable" } }
          }
        },
        { "mail" : {
            "to" : [ "account:mail" ],
            "subject" : "Your membership request for \\u0027[group:title]\\u0027",
            "message" : "[account:name],\\r\\n\\r\\nYour membership to group \\u0027[group:title]\\u0027 located at [group:url] is pending approval."
          }
        },
        { "mail" : {
            "to" : [ "group:author:mail" ],
            "subject" : "[account:name] membership request [group:title]",
            "message" : "[group:author:name],\\r\\n\\r\\n[account:name] requests membership for group \\u0027[group:title]\\u0027 in [group:url].\\r\\n\\r\\n[og_membership:og-membership-request]"
          }
        }
      ]
    }
  }');
  $items['rules_og_new_content'] = entity_import('rules_config', '{ "rules_og_new_content" : {
      "LABEL" : "OG new content notification",
      "PLUGIN" : "reaction rule",
      "ACTIVE" : false,
      "REQUIRES" : [ "og", "rules" ],
      "ON" : [ "node_insert" ],
      "IF" : [ { "og_entity_is_group_content" : { "entity" : [ "node" ] } } ],
      "DO" : [
        { "og_get_members" : {
            "USING" : { "group_content" : [ "node" ] },
            "PROVIDE" : { "group_members" : { "group_members" : "List of group members" } }
          }
        },
        { "LOOP" : {
            "USING" : { "list" : [ "group-members" ] },
            "ITEM" : { "list_item" : "Current list item" },
            "DO" : [
              { "mail" : {
                  "to" : [ "list-item:mail" ],
                  "subject" : "New post in group",
                  "message" : "Hello [list-item:name],\\r\\n\\r\\nThere is a new post called [node:title] that belongs to one of the groups you are subscribed to.\\r\\n\\r\\n[site:name]\\r\\n",
                  "from" : [ "" ]
                }
              }
            ]
          }
        }
      ]
    }
  }');
  return $items;
}
