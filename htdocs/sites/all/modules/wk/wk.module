<?php

/**
 * @file
 * West Kingdom customizations
 */

/**
 * Implements hook_module_implements_alter
 *
 * Make sure that our hook_form_alter is called after
 * revisioning_form_alter.
 */
function wk_module_implements_alter(&$implementations, $hook) {
  // Do nothing unless we implement the hook being tested (safety)
  if (isset($implementations['wk'])) {
    switch($hook) {
      // Make hook form_alter runs last
      case 'form_alter':
        $group = $implementations['wk'];
        unset($implementations['wk']);
        $implementations['wk'] = $group;
        break;
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 *
 * c.f. http://www.wunderkraut.com/blog/drupal-7-custom-node-view-modes/2010-12-20
 */
function wk_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['toc_entry'] = array(
    'label' => t('TOC entry'),
    'custom settings' => TRUE,
  );
}

/**
 * Add a hook suggestion for embedded content for the "officers" content type.
 *
 * http://drupal.stackexchange.com/questions/27025/how-to-provide-template-for-particular-view-mode
 */
function wk_preprocess_node(&$vars) {
  switch($vars['view_mode']) {
    case 'toc_entry':
      $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__' . $vars['view_mode'];
      break;
  }
}

/**
 * Implements hook_form_alter
 */
function wk_form_alter(&$form, &$form_state) {
  //dpm($form);
  //dpm($form_state);
  //dpm($form_state['node']);
  //dpm(current_path());
  if ($form['#id'] == 'domain_form') {
    if (!user_access('administer domains')) {
      foreach ($form as $key => $info) {
        if (is_array($info) && (array_key_exists('#type', $info))) {
          $form[$key]['#disabled'] = TRUE;
        }
      }
    }
  }
  if ($form['#id'] == 'domain-theme-form') {
    if (!user_access('administer domains') && !user_access('administer themes for assigned domains')) {
      $form['submit']['#disabled'] = TRUE;
      $form['intro'] = array('#markup' => t('You do not have permission to change the theme for this domain, but you may configure the theme settings for the selected theme.'));
      foreach ($form['theme'] as $id => $info) {
        if (isset($info['#type']) && ($info['#type'] == 'radio')) {
          if (!$form['theme'][$id]['#default_value']) {
            unset($form['theme'][$id]);
          }
          else {
            $form['theme'][$id]['#disabled'] = TRUE;
          }
        }
      }
    }
  }
  if (($form['#form_id'] == 'contact_personal_form') || ($form['#form_id'] == 'og_contact_mail_page') || ($form['#form_id'] == 'contact_site_form')) {
    if (!empty($form['mail']['#default_value'])) {
      $form['mail']['#type'] = 'hidden';
      $form['name']['#type'] = 'hidden';
      $form['to']['#type'] = 'hidden';
      $form['#validate'][] = '_wk_form_validate_email_not_changed';
    }
  }
  if (!empty($form['#node_edit_form'])) {
    // This next block is copied from the 'revisioning' module, which for some reason
    // only shows these radios for users with 'administer nodes'.  We allow it for
    // any user who can publish the node.
    $node = &$form['#node'];
    $is_moderated_content = isset($node->revision_moderation)
      ? $node->revision_moderation
      : revisioning_content_is_moderated($form['type']['#value'], $node);
    if (revisioning_user_node_access('publish revisions', $node)) {
      // Expand and move this vertical tab to top, so that it's in user's face
      if (isset($form['menu'])) {
        $form['menu']['#collapsed'] = TRUE;
      }
      $form['revision_information']['#collapsed'] = FALSE;
      $form['revision_information']['#weight'] = -3;

      $options = array();
      if (isset($node->nid)) {
        $options[NO_REVISION] = t('Modify current revision, no moderation');
      }
      $options[NEW_REVISION_NO_MODERATTION]  = t('Create new revision, no moderation');
      $options[NEW_REVISION_WITH_MODERATION] = t('Create new revision and moderate');

      // This radio selection will appear in hook_node_presave as $node->revision_operation
      $form['revision_information']['revision_operation'] = array(
        '#title' => t('Revision creation and moderation options'),
        '#description' => t('Moderation means that the new revision is not publicly visible until approved by someone with the appropriate permissions.'),
        '#type' => 'radios',
        '#options' => $options,
        '#default_value' => isset($node->nid)
          ? (int)$node->revision + (int)$is_moderated_content
          : ($is_moderated_content ? NEW_REVISION_WITH_MODERATION : NEW_REVISION_NO_MODERATTION)
      );
      unset($form['revision_information']['revision']);

      // Add javascript to show/hide the "Published" checkbox if the user
      // presses one of the first two radio buttons. Also updates summary tabs.
      $js_file = drupal_get_path('module', 'revisioning') . '/revision-radios.js';
      drupal_add_js($js_file, array('weight' => 1)); // after node.js
      // If preference specifies that "no moderation" is the default, then change the control default value
      if (variable_get('wk_no_moderation_by_default', TRUE)) {
        $form['revision_information']['revision_operation']['#default_value'] = NEW_REVISION_NO_MODERATTION;
      }
    }
  }
}

/**
 * Implementation of hook_block_info().
 */
function wk_block_info() {
  $blocks['wk_related_sites'] = array(
    'info' => t('Related Sites'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/*
  $site_label = wk_branch_site_label($branch_term);
  $description = strip_tags($branch_term['description']);
  $site_label .= " <span class='site-label-location'>$description</span>";
*/

/**
 * Implementation of hook_block_view().
 */
function wk_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'wk_related_sites':
      $content = '';
      $parent_terms = regnum_domain_parent_term_list();
      if (!empty($parent_terms)) {
        $parent_term_list = wk_branch_site_label_list(array_reverse($parent_terms), array("class" => "site-arms"));
        $parent_list_html = theme_item_list(array('items' => $parent_term_list, 'title' => NULL, 'type' => 'ul', 'attributes' => array()));
        $content = "<span id='parent-sites'>$parent_list_html</span>";
      }
      $site_branch_term = regnum_domain_taxonomy_term();
      $children_terms =  taxonomy_get_children($site_branch_term->tid);
      if (!empty($children_terms)) {
        $children_terms_list = wk_branch_site_label_list($children_terms, array("class" => "site-arms"));
        $children_list_html = theme_item_list(array('items' => $children_terms_list, 'title' => FALSE, 'type' => 'ul', 'attributes' => array()));
        $content .= "<span id='parent-sites'>$children_list_html</span>";
      }
      $block['subject'] = t('Related Sites');
      $block['content'] = $content;
      break;
  }
  return $block;
}

/**
 * Don't allow users to change their personal email address
 * on contact forms.  This validate function will only be set
 * if the user was logged in; anonymous users get to put whatever
 * they want here.
 */
function _wk_form_validate_email_not_changed($form, &$form_state) {
  global $user;
  if ($form_state['values']['mail'] != $user->mail) {
    form_error($form, t('You may not change your email address on the contact form.'));
  }
}

/**
 * Implements hook_block_view_alter
 */
function wk_block_view_alter(&$data, $block) {
  // The officers list block 1 is a view that shows
  // the list of officers in a given office.  The view
  // is configured to show on nodes in a group; however,
  // we only want it to display on the top-level group
  // node.  Therefore, we test explicitly for node type
  // of 'officers', and remove the block for all other
  // node types.
  if ($block->delta == "officers_list-block_1") {
    $node = menu_get_object();
    if ($node && $node->type != 'officers') {
      $data['content'] = FALSE;
    }
  }
  /*
  // Example from drupal.org documentation:
  // Add a theme wrapper function defined by the current module to all blocks
  // provided by the "somemodule" module.
  if (is_array($data['content']) && $block->module == 'somemodule') {
    $data['content']['#theme_wrappers'][] = 'mymodule_special_block';
  }
  */
}

/*
// not working; leaving here to try again later
function wk_admin_menu_output_alter(&$content) {
  $node = menu_get_object();
  if ($node) {
    $content['menu']['node/add']['node/add/page']['#options']['query'] = array('og_group_ref' => $node->nid);
  }
  //var_export($content);
}
*/

/**
 * Implement hook_domain_conf()
 */
function wk_domain_conf() {
  $form['wk'] = array(
    '#type' => 'fieldset',
    '#title' => t('Copyright'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['wk']['wk_copyright_base_year'] = array(
    '#type' => 'textfield',
    '#title' => t('Site copyright base year'),
    '#default_value' => variable_get('wk_copyright_base_year', ''),
    '#size' => 30,
    '#maxlength' => 255,
    '#description' => t('The first year that material was placed on this site. The token [site:copyright] will result in a range of years spanning from the base year to the current year (e.g. 2010-2013).')
  );
  return $form;
}

/**
 * Implements hook_permission().
 */
function wk_permission() {
  $permissions = array(
    'administer site configuration for assigned domains' => array(
      'title' => t('Administer site configuration for assigned domains'),
      'restrict access' => TRUE,
    ),
    'administer menu for assigned domains' => array(
      'title' => t('Administer menu for assigned domains'),
    ),
    'administer themes for assigned domains' => array(
      'title' => t('Administer themes for assigned domains'),
      'description' => t('Select the theme for assigned domains, and adjust theme configuration.'),
    ),
    'administer theme configuration for assigned domains' => array(
      'title' => t('Administer theme configuration for assigned domains'),
      'description' => t("Allow a user who cannot change the domain theme to configure the selected theme's configuration."),
    ),
  );
  return $permissions;
}

function wk_menu_alter(&$items) {
  $items['admin/structure/domain']['access callback'] = '_wk_domain_view_access_callback';
  $items['admin/structure/domain']['access arguments'] = array('administer site configuration for assigned domains');
  $items['admin/structure/domain/view']['access callback'] = '_wk_domain_view_access_callback';
  $items['admin/structure/domain/view']['access arguments'] = array('administer site configuration for assigned domains');
  $items['admin/structure/domain/view/%domain']['access callback'] = '_wk_domain_conf_access_callback';
  $items['admin/structure/domain/view/%domain']['access arguments'] = array(4, 'administer site configuration for assigned domains');
  $items['admin/structure/domain/view/%domain/edit']['access callback'] = '_wk_domain_conf_access_callback';
  $items['admin/structure/domain/view/%domain/edit']['access arguments'] = array(4, 'administer site configuration for assigned domains');
  $items['admin/structure/domain/view/%domain/config']['access callback'] = '_wk_domain_conf_access_callback';
  $items['admin/structure/domain/view/%domain/config']['access arguments'] = array(4, 'administer site configuration for assigned domains');
  $items['admin/structure/domain/view/%domain/conf-reset']['access callback'] = '_wk_domain_conf_access_callback';
  $items['admin/structure/domain/view/%domain/conf-reset']['access arguments'] = array(4, 'administer site configuration for assigned domains');
  $items['admin/structure/domain/view/%domain/theme']['access callback'] = '_wk_domain_conf_access_callback';
  $items['admin/structure/domain/view/%domain/theme']['access arguments'] = array(4, 'administer themes for assigned domains', 'administer theme configuration for assigned domains');
  $items['admin/structure/domain/view/%domain/theme/%/theme-settings']['access callback'] = '_wk_domain_conf_access_callback';
  $items['admin/structure/domain/view/%domain/theme/%/theme-settings']['access arguments'] = array(4, 'administer themes for assigned domains', 'administer theme configuration for assigned domains');
}

function _wk_domain_view_access_callback($permission) {
  return user_access('administer domains') || user_access($permission);
}

function _wk_domain_conf_access_callback($domain, $permission, $alternate_permission = '') {
  if (user_access('administer domains')) {
    return TRUE;
  }
  // If the user is assigned to this domain, then allow them to
  // edit this domain configuration item if they have the right
  // to do so, as granted by our permission
  global $user;
  if (array_key_exists($domain['domain_id'], $user->domain_user)) {
    return user_access($permission) || (!empty($alternate_permission) && user_access($alternate_permission));
  }
  return FALSE;
}

/**
 * Hook token_info
 *
 * Declare tokens as_year and event_month.
 */
function wk_token_info() {
  // These tokens are only available for nodes of type 'cal_event'
  $node['as_year'] = array(
    'name' => t("Anno Societatis Year"),
    'description' => t('Year in Anno Societatis (AS). See http://www.sca.org/links/calendar.html.'),
  );
  $node['event_month'] = array(
    'name' => t("Event Month"),
    'description' => t('The month that the event is held in (reconed by starting date).'),
  );
  // Because of http://drupal.org/node/691078, we just hack in our own
  // field-based tokens here for now (cough).
  // These tokens are only available for nodes of type 'location' and
  // 'cal_event' (if the calendar event has a location set).
  $node['field_location_street'] = array(
    'name' => t("Location Street"),
    'description' => t('The street address that a location is located at.'),
  );
  $node['field_location_city'] = array(
    'name' => t("Location City"),
    'description' => t('The city that a location is in.'),
  );
  $node['field_location_province'] = array(
    'name' => t("Location Province"),
    'description' => t('The abbreviation for the province (State) that a location is in.'),
  );
  $node['field_location_province_name'] = array(
    'name' => t("Location Province Name"),
    'description' => t('The full name of the province (State) that a location is in.'),
  );
  $node['field_location_postal_code'] = array(
    'name' => t("Location Postal Code"),
    'description' => t('The postal code for the location.'),
  );
  $node['field_location_country'] = array(
    'name' => t("Location Country"),
    'description' => t('The country that a location is in.'),
  );
  $node['field_location_country_name'] = array(
    'name' => t("Location Country Name"),
    'description' => t('The full name of the country that a location is in.'),
  );
  $node['field_location_summary'] = array(
    'name' => t("Location Summary"),
    'description' => t('A parenthesized summary of the location (City, State).'),
  );
  $node['field_location_address'] = array(
    'name' => t("Location Summary"),
    'description' => t('A parenthesized summary of the location address (Street, City, State Zip).'),
  );
  $site['copyright'] = array(
    'name' => t("Copyright"),
    'description' => t("A range of years starting at the specified base year (as set in domain access settings) and continuing to the current year."),
  );
  return array(
    'tokens' => array('node' => $node, 'site' => $site),
  );
}

/**
 * Hook tokens
 *
 * Provide data for as_year and event_month tokens.
 */
function wk_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'site') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'copyright':
          $date_info = getdate(time());
          $current_year = $date_info['year'];
          $base_year = variable_get('wk_copyright_base_year', '');
          if (($base_year == $current_year) || (empty($base_year))) {
            $copyright = $current_year;
          }
          else {
            $copyright = $base_year . '-' . $current_year;
          }
          $replacements[$original] = $copyright;
          break;
      }
    }
  }
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];
    if ($node->type == 'cal_event') {
      foreach ($tokens as $name => $original) {
        switch ($name) {
          case 'as_year':
            $start_date = $node->field_date['und'][0]['value'];
            $as = wk_time_string_to_as($start_date);
            $replacements[$original] = 'AS' . $as;
            break;
          case 'event_month':
            $start_date = $node->field_date['und'][0]['value'];
            $timestamp=strtotime($start_date);
            $replacements[$original] = date('M', $timestamp);
            break;
        }
      }
    }
    $location_field = array();
    if (($node->type == 'location') && (isset($node->field_location['und'][0]))) {
      $location_field = $node->field_location['und'][0];
    }
    if (($node->type == 'cal_event') && (isset($node->field_event_site['und'][0]))) {
      $location_nid = $node->field_event_site['und'][0]['nid'];
      $location_node = node_load($location_nid);
      if (isset($location_node->field_location['und'][0])) {
        $location_field = $location_node->field_location['und'][0];
      }
    }
    if (isset($location_field['city']) && isset($location_field['province'])) {
      $location_field['summary'] = "(" . $location_field['city'] . ", " . $location_field['province'] . ")";
    }
    else {
      $location_field['summary'] = '(TBD)';
    }
    $location_address = '';
    if (isset($location_field['street'])) {
      $location_address = str_replace(array_keys($location_field), array_values($location_field), "(street, city province postal_code)");
    }
    else {
      $location_address = '(TBD)';
    }
    $location_field['address'] = $location_address;
    foreach ($tokens as $name => $original) {
      if (substr($name,0,15) == 'field_location_') {
        // $name is always 'field_location_xxx', so key is 'xxx'.
        $key = substr($name, 15);
        if (isset($location_field[$key])) {
          $replacements[$original] = $location_field[$key];
        }
        else {
          $replacements[$original] = '';
        }
      }
    }
  }
  return $replacements;
}

function wk_time_string_to_as($time_string) {
  $timestamp=strtotime($time_string);
  return wk_timestamp_to_as($timestamp);
}

function wk_timestamp_to_as($timestamp) {
  $date_info = getdate($timestamp);
  $as = $date_info['year'] - 1966;
  if ($date_info['mon'] >= 5) {
    $as = $as + 1;
  }
  return $as;
}

function wk_node_view($node, $view_mode, $langcode) {
  if (($node->type == 'cal_event') && ($view_mode == 'full')) {
    if (isset($node->content['field_event_site'][0]['body'])) {
      //$node->content['field_directions'] = $node->content['field_event_site'][0]['body'];
      if (!isset($node->content['field_directions'][0])) {
        $node->content['field_directions'] = array(
          '#theme' => 'field',
          '#weight' => 99,
          '#title' =>  'Directions',
          '#access' => TRUE,
          '#label_display' => 'above',
          '#view_mode' => 'full',
          '#language' => $langcode,
          '#field_name' => 'field_directions',
          '#field_type' => 'text',
          '#formatter' => 'text_default',
          '#entity_type' => 'node',
          '#bundle' => 'cal_event',
          '#object' => $node,
          '#items' => array(
            0 => array(
              'value' => '',
              'format' => NULL,
              'safe_value' => '')),
        );
      }
      $direction_diagram = '';
      if (isset($node->content['field_event_site'][0])) {
        $direction_diagram = render($node->content['field_event_site'][0]['field_directions_diagram']);
        hide($node->content['field_event_site'][0]['field_directions_diagram']);
      }
      $node->content['field_directions'][0]['#markup'] = $direction_diagram . $node->content['field_event_site'][0]['body'][0]['#markup'];
      hide($node->content['field_event_site'][0]['body']);
    }
  }
}

/**
 * Hook pathauto_alias alter.
 * See http://drupal.org/node/684132
 */
function wk_pathauto_alias_alter(&$alias, array &$context) {
  if (($context['op'] != 'return') && ($context['module'] == 'taxonomy_term')) {
    $term = $context['data']['term'];
    // Make calendar path aliases for branch group taxonomy terms (vid == 2)
    if ($term->vid == 2) {
      $short_name = _wk_term_short_name($term);
      $machine_name = _wk_to_machine_name($short_name);
      // Remap calendar/tid to calendar/term_name, etc.
      // This is like pathauto for view arguments.  :)
      $path_list = array(
        "calendar/%",
        "meetings/%"        => "meetings/%/0",
        "meetings/%/all"    => "meetings/%/9",
        "events/%"          => "events/%/0",
        "events/%/all"      => "events/%/9",
        "events/%/feed"     => "events/%/0/feed",
        "events/%/all/feed" => "events/%/9/feed",
      );
      foreach ($path_list as $alias_path => $system_path) {
        if (is_numeric($alias_path)) {
          $alias_path = $system_path;
        }
        $system_path = str_replace("%", $term->tid, $system_path);
        $alias_path = str_replace("%", $machine_name, $alias_path);
        $existing_path = path_load($system_path);
        if (!empty($existing_path)) {
          path_delete($existing_path['pid']);
        }
        if (!empty($alias_path)) {
          $path_args = array("source" => $system_path, "alias" => $alias_path);
          path_save($path_args);
        }
      }
    }
  }
}

function _wk_term_short_name($term) {
  $short_name = '';

  if (isset($term->field_short_name[LANGUAGE_NONE][0]['value'])) {
    $short_name = $term->field_short_name[LANGUAGE_NONE][0]['value'];
  }
  if (empty($short_name)) {
    $short_name = _wk_shorten_name($term->name);
  }

  return $short_name;
}

function _wk_shorten_name($name) {
  $remove = array("Kingdom of ", "Principality of ", "Palatine Barony of ", "Barony of ", "Kingdom of ", "Shire of ", "Province of ", "Canton of ", "College of ", "Stronghold of ", "the ", " (incipiant)");

  foreach ($remove as $string_to_remove) {
    $name = str_replace($string_to_remove, '', $name);
  }

  return $name;
}

function _wk_to_machine_name($human_readable) {
  $machine_readable = strtolower($human_readable);
  $machine_readable = preg_replace("@['`]s@",'s',$machine_readable);
  $machine_readable = preg_replace('@[^a-z0-9_]+@','-',$machine_readable);
  return $machine_readable;
}

/**
 * Return the URL to the specified site, or FALSE if the
 * branch does not have a site.
 */
function wk_branch_site_url($branch_term) {
  $term = $branch_term;
  if (is_array($term)) {
    $term = $term['tid'];
  }
  $e = entity_metadata_wrapper("taxonomy_term", $term);
  $url = $e->field_external_site_url->value();
  if (empty($url)) {
    $domain = _regnum_domain_sitename_load($branch_term);
    if (!empty($domain)) {
      $url = $domain['scheme'] . '://' . $domain['subdomain'];
    }
    else {
      $url = FALSE;
    }
  }
  return $url;
}

function wk_branch_site_label($branch_term, $image_attributes = array(), $require_url = TRUE) {
  if (is_numeric($branch_term)) {
    $branch_term = taxonomy_term_load($branch_term);
  }
  if (is_object($branch_term)) {
    $branch_term = (array)$branch_term;
  }

  $url = wk_branch_site_url($branch_term);
  $title = $branch_term['name'];
  $description = strip_tags($branch_term['description']);
  $site_label = '';
  if ($url) {
    $site_label = l($title, $url, array('attributes' => array('title' => $description, 'class' => array('site-label'))));
  }
  elseif(!$require_url) {
    $site_label = "<b>$title</b>";
  }
  if (!empty($site_label)) {
    $e = entity_metadata_wrapper("taxonomy_term", $branch_term['tid']);
    $img_info = $e->field_arms->value();
    if ($img_info) {
      $site_label = theme_image(array("path" => $img_info['uri'], "title" => $title, "attributes" => $image_attributes)) . " $site_label";
    }
  }
  return $site_label;
}

function wk_branch_site_label_list($branch_list, $image_attributes = array(), $require_url = TRUE) {
  $list = array();
  foreach ($branch_list as $branch_term) {
    $site_label = wk_branch_site_label($branch_term, $image_attributes, $require_url);
    if (!empty($site_label)) {
      $list[] = $site_label;
    }
  }
  return $list;
}
