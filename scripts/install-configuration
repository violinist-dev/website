#!/bin/bash

# If a --uri= or @alias is needed for Drush calls,
# pass it in as the first (only) parameter to this script.
SITE_IDENTIFIER="$1"

SELF_DIRNAME="`dirname -- "$0"`"
PROJECT_BASE_DIR="`cd -P -- "$SELF_DIRNAME/.." && pwd -P`"
DRUPAL_ROOT="$PROJECT_BASE_DIR/drupal"

cd "$DRUPAL_ROOT"
drush cc drush

TESTSITEDIR="${SITEDIR:-${DEFAULT_SITEDIR:-behat}}"

# If there isn't a settings.local.php, create it and
# ensure that it bootstraps domain access.
chmod +w sites/$TESTSITEDIR
if [ ! -f sites/$TESTSITEDIR/settings.local.php ]
then
  echo "<?php" > sites/$TESTSITEDIR/settings.local.php
fi
grep -q 'domain/settings.inc' sites/$TESTSITEDIR/settings.local.php
if [ $? != 0 ]
then
  cat << __EOF__ >> sites/$TESTSITEDIR/settings.local.php
// Include Domain access settings
try {
  // When called by the Drupal driver, domain access
  // initialization does not work.  For other bootstraps
  // (e.g. Drush or Webserver), it works fine.
  if (function_exists("drush_main") || !class_exists("Drupal\Driver\DrupalDriver")) {
    include DRUPAL_ROOT . '/sites/all/modules/contrib/domain/settings.inc';
  }
}
catch(Exception \$e) {}
__EOF__
fi

# Install drush_ctex_bonus so that we can use it.
# First check and see if it is already available.
drush help cb-umaster &>/dev/null
if [ $? != 0 ]
then
  (
    mkdir -p "$HOME/.drush"
    cd "$HOME/.drush"
    drush dl drush_ctex_bonus-7.x
    drush cc drush
  )
fi

# Install the configuration settings form wk_config
drush "$SITE_IDENTIFIER" cb-umaster wk_config -y

# For transient data that might change, it is best to use
# a Behat "background":
#
#  Background:
#    Given "vocabulary_2" terms:
#    | name                        |
#    | Kingdom of Imaginarium      |
#    | Principality of Contrivance |
#    And "offices" terms:
#    | name         |
#    | Seneschal    |
#    | Web Minister |
#    | Chatalaine   |
#
# However, the issue with "backgrounds" is that they are
# deleted and recreated frequently, often more than once
# per scenario.  This is great if you want to be able
# to test modifications to the background data without
# polluting future tests; however, one unfortunate side
# effect of this design decision is that the id of each
# item changes every time the data is recreated.  This
# causes large problems when trying to select items based on
# their id; this is particularly acute for taxonomy
# checkbox lists, as the taxonomy term ids change between
# checkbox selection and form validation, causing a
# validation failure.
#
# The solution is to pre-create any static content
# prior to running behat, and ensure that the static
# content is not modified by any test (or, if it is,
# then it must be restored afterwards).  We will define
# that data here.
STATIC_TEST_CONTENT="$SELF_DIRNAME/data/static-test-content.yml"
drush "$SITE_IDENTIFIER" behat import --file="$STATIC_TEST_CONTENT"
drush "$SITE_IDENTIFIER" cc all
